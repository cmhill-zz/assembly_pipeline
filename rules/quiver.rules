import operator
import os
import glob

configfile: "config.json"

SNAKEMAKE_DIR = os.path.dirname(workflow.snakefile)

# Make a list of batches to split reads into.
BATCHES = list(range(int(config["quiver"].get("batches", "1"))))

# Make a list of regions to break the assembly into for quivering.
REGIONS = list(range(int(config["quiver"].get("regions", "15"))))

# # Create the final quiver assembly.
rule quiver_assembly:
    input: config["assembly"]["quivered"]

# Build the suffix array used for BLASR alignments.
rule construct_suffix_array:
    input: config["assembly"]["fasta"]
    output: config["assembly"]["fasta"] + '.sa'
    params: sawriter=config["quiver"]["sawriter"], sge_opts=""
    shell: "{params.sawriter} {input}"

# Align reads with BLASR (at least rc.43). Often you'll want to split the total alignment set into a few (10 or so) BAMS.
rule align_reads:
    input: contigs=config["assembly"]["fasta"], bax_fofn=config["quiver"]["bax_fofn"], suffix_array=config["assembly"]["fasta"] + '.sa'
    output: "quiver/submit.sh"
    params: sge_opts="", batches=config["quiver"]["batches"]
    shell: "python2 /net/eichler/vol5/home/chrismh/scripts/PrintAlignmentCommands.py {input.bax_fofn} --minMapq 30 --outdir ./quiver/ --cmdbase align --commands ./quiver/commands --tempdir /var/tmp/chrismh --input ./quiver/input --submit ./quiver/submit.sh --ref={input.contigs} --split {params.batches}"

# Run the BLASR alignment scripts.
rule submit_read_alignments_to_grid:
    input: lambda wc: glob.glob("quiver/commands/align.{wc.group}.tmp*.sh".format(wc=wc)), "quiver/submit.sh"
    output: "quiver/align.{group}.bam"
    params: sge_opts="-l mfree=4G -pe serial 10 -N align_batch_{group}"
    shell: "sh {input} &> log.{wildcards.group}"

# Create a FOFN for the BLASR BAM files.
rule get_name_of_all_bams:
    input: expand("quiver/align.{batch_id}.bam", batch_id=BATCHES)
    output: "quiver/aligned_bams.fofn"
    params: sge_opts=""
    shell: "ls quiver/align.*.bam > quiver/aligned_bams.fofn"

# Split the assembly into regions for quivering.
rule create_regions_for_quiver:
    input: contigs=config["assembly"]["fasta"]
    output: "quiver/regions.txt"
    params: sge_opts=""
    shell: """samtools faidx {input.contigs}; awk '{{ print $1":1-"$2;}}' {input.contigs}.fai > quiver/regions.txt"""

rule split_regions_evenly:
    input: "quiver/regions.txt"
    output: expand("quiver/split_regions.{region}.rgn", region=REGIONS)
    params: sge_opts=""
    shell: "/net/eichler/vol5/home/mchaisso/projects/PacBioSequencing/scripts/Consensus/SplitRegionsBySize.py {input} --base quiver/split_regions --n 15"

# Run quiver on each region.
rule run_quiver:
    input: region="quiver/split_regions.{region}.rgn",assembly=config["assembly"]["fasta"],aligned_bams_fofn="quiver/aligned_bams.fofn"
    output: "quiver/split_regions.{region}.rgn.fastq"
    params: sge_opts="-l mfree=4G -pe serial 8"
    shell: "source ~mchaisso/software/quiver/setup_quiver.sh; ~mchaisso/software/quiver/bin/quiver -r {input.assembly} --referenceWindowsFile {input.region} -o {output} -j 8 {input.aligned_bams_fofn}"

# Create the final quiver assembly.
rule aggregate_quiver_output:
    input: expand("quiver/split_regions.{region}.rgn.fastq", region=REGIONS)
    output: config["assembly"]["quivered"]
    params: sge_opts=""
    shell: "cat quiver/split_regions.*.rng.fastq > {output}"
